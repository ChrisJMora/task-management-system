# Nombre del workflow
name: Validación de Pull Request y Despliegue de Reportes

# Descripción: Este workflow valida pull requests en la rama 'develop', ejecuta pruebas,
# genera reportes con Maven (Checkstyle, PMD, JaCoCo, Javadoc) y los despliega en GitHub Pages.

# Definición de permisos para el workflow, siguiendo el principio de privilegio mínimo
permissions:
  contents: read      # Permiso para leer el contenido del repositorio
  pages: write        # Permiso para escribir en GitHub Pages
  id-token: write     # Permiso para autenticación con GitHub Pages

# Evento que dispara el workflow
on:
  pull_request:
    branches:
      - develop
    types:
      - opened          # Se ejecuta al abrir un PR
      - synchronize     # Se ejecuta al actualizar un PR
      - reopened        # Se ejecuta al reabrir un PR

# Cancelación de ejecuciones previas para optimizar recursos
concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Job para validar el código y generar reportes
  validate:
    name: Validar Código y Generar Reportes
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout del código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Obtiene el historial completo para análisis de cambios

      # Paso 2: Configurar JDK 11
      - name: Configurar JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'          # Versión especificada en el pom.xml
          distribution: 'temurin'     # Distribución confiable de JDK
          cache: 'maven'              # Habilita caché para dependencias de Maven

      # Paso 3: Validar formato del código con Checkstyle
      - name: Validar formato con Checkstyle
        run: mvn checkstyle:check -B -f pom.xml
        continue-on-error: true
        # Ejecuta la validación de Checkstyle según la configuración de google_checks.xml

      # Paso 4: Ejecutar pruebas unitarias y generar reporte de cobertura con JaCoCo
      - name: Ejecutar pruebas y cobertura
        run: mvn test jacoco:report -B -f pom.xml
        continue-on-error: true
        # Ejecuta pruebas unitarias con Surefire y genera reporte de cobertura con JaCoCo

      # Paso 5: Validar reglas de PMD
      - name: Validar reglas de PMD
        run: mvn pmd:check -B -f pom.xml
        continue-on-error: true
        # Ejecuta la verificación de PMD según las reglas definidas en el pom.xml

      # Paso 6: Generar reportes con Maven Site
      - name: Generar reportes con Maven Site
        run: mvn site -B -f pom.xml
        continue-on-error: true
        # Genera reportes de Checkstyle, PMD, JaCoCo y Javadoc para el sitio

      # Paso 7: Guardar reportes como artefacto
      - name: Guardar reportes como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: maven-site-reports
          path: target/site
          retention-days: 1 # Conserva los artefactos por 1 día
        if: always()        # Siempre sube los artefactos, incluso si fallaron pasos anteriores

  # Job para desplegar reportes en GitHub Pages
  deploy:
    name: Desplegar Reportes
    runs-on: ubuntu-latest
    needs: validate # Depende del job 'validate'
    if: always()

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout del código
        uses: actions/checkout@v4

      # Paso 2: Descargar reportes generados
      - name: Descargar reportes
        uses: actions/download-artifact@v4
        with:
          name: maven-site-reports
          path: target/site
        # Descarga los reportes generados en el job 'validate'

      # Paso 3: Validar contenido de reportes
      - name: Validar reportes generados
        run: |
          if [ ! -d "target/site" ] || [ -z "$(ls -A target/site)" ]; then
            echo "Error: Directorio target/site está vacío o no existe."
            exit 1
          fi
        continue-on-error: true

      # Paso 4: Desplegar en GitHub Pages
      - name: Desplegar en GitHub Pages
        uses: peaceiris/actions-gh-pages@v4 # Versión específica para estabilidad
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/site
          keep_files: false              # Sobrescribe el contenido existente
          force_orphan: true             # Crea un nuevo historial para la rama gh-pages
          destination_dir: pr-${{ github.event.pull_request.number }}
          # Despliega en un subdirectorio único por PR
        if: always()