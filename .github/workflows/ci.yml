# Nombre del workflow
name: Validación de Pull Request y Despliegue de Reportes

# Descripción: Este workflow valida pull requests en la rama 'develop', ejecuta pruebas,
# genera reportes con Maven (Checkstyle, PMD, JaCoCo, Javadoc) y los despliega en GitHub Pages.

# Definición de permisos para el workflow, siguiendo el principio de privilegio mínimo
permissions:
  contents: read      # Permiso para leer el contenido del repositorio
  pages: write        # Permiso para escribir en GitHub Pages
  id-token: write     # Permiso para autenticación con GitHub Pages

# Evento que dispara el workflow
on:
  pull_request:
    branches:
      - develop
    types:
      - opened          # Se ejecuta al abrir un PR
      - synchronize     # Se ejecuta al actualizar un PR
      - reopened        # Se ejecuta al reabrir un PR

# Cancelación de ejecuciones previas para optimizar recursos
concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Job para validar el código y generar reportes
  validate:
    name: Validar Código y Generar Reportes
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout del código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Obtiene el historial completo para análisis de cambios

      # Paso 2: Configurar JDK 11
      - name: Configurar JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'          # Versión especificada en el pom.xml
          distribution: 'temurin'     # Distribución confiable de JDK
          cache: 'maven'              # Habilita caché para dependencias de Maven

      # Paso 3: Validar formato del código con Checkstyle
      - name: Validar formato con Checkstyle
        run: mvn checkstyle:check -B -f pom.xml
        # Ejecuta la validación de Checkstyle según la configuración de google_checks.xml

      # Paso 4: Ejecutar pruebas unitarias y generar reporte de cobertura con JaCoCo
      - name: Ejecutar pruebas y cobertura
        run: mvn test jacoco:report -B -f pom.xml
        # Ejecuta pruebas unitarias con Surefire y genera reporte de cobertura con JaCoCo

      # Paso 5: Validar reglas de PMD
      - name: Validar reglas de PMD
        run: mvn pmd:check -B -f pom.xml
        # Ejecuta la verificación de PMD según las reglas definidas en el pom.xml

      # Paso 6: Generar reportes con Maven Site
      - name: Generar reportes con Maven Site
        run: mvn site -B -f pom.xml
        # Genera reportes de Checkstyle, PMD, JaCoCo y Javadoc para el sitio

      # Paso 7: Subir artefacto para Pages
      - name: Subir reportes para Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'target/site'

  # Job para desplegar reportes en GitHub Pages
  deploy:
    name: Desplegar Reportes
    runs-on: ubuntu-latest
    needs: validate
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write

    steps:
      # Paso 1: Desplegar en GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4